{"version":3,"sources":["logo.svg","components/Header.js","components/World.js","components/Statedata.js","components/India.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","React","Component","World","state","worldData","axios","get","then","response","setState","data","this","map","item","key","country","style","width","height","src","countryInfo","flag","cases","todayCases","recovered","deaths","State","stateData","keys","Object","Accordion","districts","districtData","total_active","total_confirmed","total_recoverd","total_deaths","district_list","x","active","confirmed","deceased","obj","push","Card","as","Button","eventKey","Body","district_name","India","india","Title","Text","todayRecovered","todayDeaths","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bd0b9f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport {Nav,Navbar} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\n\nclass Header extends React.Component{\n\n    constructor(){\n        super()\n    }\n\n    render(){\n        return(\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand> <Link to =\"/india\">Covid 19</Link></Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Link className= 'nav-link' to =\"/india\">India</Link>\n      <Link className = 'nav-link' to=\"/world\">World</Link>\n     \n    </Nav>\n   \n  </Navbar.Collapse>\n</Navbar>\n\n        )\n    }\n\n}\n\nexport default Header;\n","import React from 'react';\nimport axios from 'axios';\n\n\nclass World extends React.Component{\n\n\n    constructor(){\n        super()\n\n        this.state={\n            worldData:[]\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://corona.lmao.ninja/v2/countries')\n        .then(response =>{\n            this.setState({worldData:response.data});\n        })\n    }\n\n    render(){\n        return(\n\n            <div className =\"row\">\n                <div className =\"col-md-12\">\n                    <table className=\"table table-bordered table-striped\">\n                        <thead>\n                            <tr>\n                                <td>Country Name</td>\n                                <td>Total cases</td>\n                                <td>Active cases</td>\n                                <td>Recovered cases</td>\n                                <td>Total deaths</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.worldData.map((item,key)=>{\n                                return(\n                                    <tr>\n                                        <td>{item.country}\n                                        <img style={{width:'20px',height:'20px'}} src={item.countryInfo.flag}/>\n                                        </td>\n                                        <td>{item.cases}</td>\n                                        <td>{item.todayCases}</td>\n                                        <td>{item.recovered}</td>\n                                        <td>{item.deaths}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n            \n        )\n    }\n}\n\nexport default World;","import React from 'react';\nimport axios from 'axios';\nimport {Accordion,Card,Button} from 'react-bootstrap';\n\n\nclass State extends React.Component{\n    constructor(){\n        super();\n        this.state ={\n            stateData:{}\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://api.covid19india.org/state_district_wise.json')\n        .then(response =>{\n            this.setState({stateData:response.data});\n        })\n    }\n\n    render(){\n\n        let keys = Object.keys(this.state.stateData);\n\n        return(\n            <div className =\"row\">\n                <div className =\"col-md-12\">\n\n                <Accordion>\n                    {\n                        keys.map((item,key)=>{\n                            let districts = this.state.stateData[item].districtData;\n                            let district_key = Object.keys(districts);\n\n                            let total_active =0;\n                            let total_confirmed =0;\n                            let total_recoverd =0;\n                            let total_deaths = 0;\n                            let district_list =[]\n                            for(let x in districts){\n                                total_active +=districts[x].active;\n                                total_confirmed +=districts[x].confirmed;\n                                total_recoverd +=districts[x].recovered;\n                                total_deaths += districts[x].deceased;\n                                let obj =districts[x];\n                                obj['district_name'] =x;\n                                district_list.push(obj);\n                            }\n                            // console.log(district_list);\n                            return(\n\n                                <Card>\n                        <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"primary\" eventKey={key}>\n                            {item}      - <span className=\"btn-secondary p-1 mr-2\">total confirmed   {total_confirmed}  </span>  <span className=\"btn-danger p-1 mr-2\">total active   {total_active}  </span>  <span className=\"btn-danger p-1 mr-2\">total recovered   {total_recoverd}     total deaths    {total_deaths}</span>\n                        </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey={key}>\n                        <Card.Body>\n                            <table className =\"table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <td>District</td>\n                                    <td>Total cases</td>\n                                    <td>Active cases</td>\n                                    <td>recovered </td>\n                                    <td>total Deaths</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {district_list.map((item,key)=>{\n                                        return(\n                                            <tr>\n                                                <td>{item.district_name}</td>\n                                                <td>{item.active}</td>\n                                                <td>{item.confirmed}</td>\n                                                <td>{item.recovered}</td>\n                                                <td>{item.deceased}</td>\n                                            </tr>\n                                        )\n                                    })}\n                                </tbody>\n                            </table>\n                        </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n  \n\n\n                            )\n\n                        })\n                    }\n                     </Accordion>\n  \n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default State;","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport State from './Statedata';\nimport axios from 'axios';\n\n\nclass India extends React.Component{\n\n    constructor(){\n        super();\n\n        this.state ={\n\n            india :{}\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://corona.lmao.ninja/v2/countries/india')\n        .then(response =>{\n            this.setState({india:response.data});\n        })\n    }\n\n    render(){\n        return(\n            <div className= \"container-fluid\">\n                <div className= 'col-md-12'>\n                    <div className ='row'>\n                        <img src= 'https://www.countryflags.io/IN/shiny/64.png'/>\n                    </div>\n                        <h3>India</h3>\n                    <div className =\"col-md-12\">\n                        <div className = 'row'>\n                    <div className =\"col-md-3\">\n                    <Card className =\"badge badge-primary\" style={{ width: '18rem' }}>\n                        <Card.Body className =\"text-center\">\n                            <Card.Title>Total cases</Card.Title>\n                            <h3>{this.state.india.cases}</h3>\n                            <Card.Text className=\"\">\n                                today[{this.state.india.todayCases}]\n                            </Card.Text>\n                        </Card.Body>\n                        </Card>\n\n                        \n                    </div>\n\n                    <div className =\"col-md-3\">\n                    <Card className =\"badge badge-warning\" style={{ width: '18rem' }}>\n                        <Card.Body className =\"text-center\">\n                            <Card.Title>Active cases</Card.Title>\n                            <h3>{this.state.india.active}</h3>\n                            <Card.Text className=\"\">\n                            </Card.Text>\n                        </Card.Body>\n                        </Card>\n\n                        \n                    </div>\n\n                    <div className =\"col-md-3\">\n                    <Card className =\"badge badge-success\" style={{ width: '18rem' }}>\n                        <Card.Body className =\"text-center\">\n                            <Card.Title>Recovered cases</Card.Title>\n                    <h3>{this.state.india.recovered}</h3>\n                            <Card.Text className=\"\">\n                                today[{this.state.india.todayRecovered}]\n                            </Card.Text>\n                        </Card.Body>\n                        </Card>\n\n                        \n                    </div>\n\n                    <div className =\"col-md-3\">\n                    <Card className =\"badge badge-danger\" style={{ width: '18rem' }}>\n                        <Card.Body className =\"text-center\">\n                            <Card.Title>Total Deaths</Card.Title>\n                            <h3>{this.state.india.deaths}</h3>\n                            <Card.Text className=\"\">\n                                today[{this.state.india.todayDeaths}]\n                            </Card.Text>\n                        </Card.Body>\n                        </Card>\n\n                        \n                    </div>\n                        </div>\n                    </div>\n                </div>\n                <div className =\"col-md-12\">\n                    <State/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default India;","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  BrowserRouter,\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\nimport Header from './components/Header';\nimport World from './components/World';\nimport India from './components/India';\nimport State from './components/Statedata'\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n  }\n\n  render(){\n    return(\n      <BrowserRouter>\n      <Header/>\n      <Switch>\n      <Route path = '/world'>\n        <World/>\n      </Route>\n      <Route path = '/india'>\n        <India/>\n      </Route>\n      <Route path = '/state'>\n        <State/>\n      </Route>\n      </Switch>\n      </BrowserRouter>\n\n\n\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}